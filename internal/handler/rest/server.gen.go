// Package rest provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package rest

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gofiber/fiber/v2"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Login user
	// (POST /auth/login)
	LoginUser(c *fiber.Ctx) error
	// Register a new user
	// (POST /users)
	RegisterUser(c *fiber.Ctx) error
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

type MiddlewareFunc fiber.Handler

// LoginUser operation middleware
func (siw *ServerInterfaceWrapper) LoginUser(c *fiber.Ctx) error {

	return siw.Handler.LoginUser(c)
}

// RegisterUser operation middleware
func (siw *ServerInterfaceWrapper) RegisterUser(c *fiber.Ctx) error {

	return siw.Handler.RegisterUser(c)
}

// FiberServerOptions provides options for the Fiber server.
type FiberServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router fiber.Router, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, FiberServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router fiber.Router, si ServerInterface, options FiberServerOptions) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	for _, m := range options.Middlewares {
		router.Use(fiber.Handler(m))
	}

	router.Post(options.BaseURL+"/auth/login", wrapper.LoginUser)

	router.Post(options.BaseURL+"/users", wrapper.RegisterUser)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8RVXW/cNhD8K8S2j8p9xEmA6qmXNgWcGGjgxkgL41DQ0t6JiUSyy5Wdw0H/vVhKOp2s",
	"s5sALvLGj+XuzHA53EPmKu8sWg6Q7iFkBVY6Di/c1thLDN7ZgLLgyXkkNhi32X1GK4McQ0bGs3EWUnj7",
	"8YOKW2rjSOmaC7RsMh23E+CdR0ghMBm7hSaBOiBJlh8JN5DCD/MBz7wDM7+SmKZJgPCf2hDmkF539bsE",
	"60Nmd/MJM5bMEf9Vl36M3esQ7hzlMq70lwu0Wy4gXS4WCVTG9vNXD+C1usJ7R1+OT55NTt5Df0iTDGBO",
	"kbjErQmMdJrHCSD3OZyd4PD96XfUv1aF0+wzQs2Y/61ZZhtHlYzAWH71Ymg1Yxm30j8JmMh4wqnn86hO",
	"k81D/0818vm34ToW9XHdTA7JY+Ilh2dxJM4I0VTeJoGAWU2Gd3/Ig2vFXXnzDnerWq5zD0aedoE6R+oB",
	"pPDns9X782fv3vw1kNLxlHB6jZqQ+vM3cfZbL8Xbjx8gab1GTrW7Q5aC2UMjwIzduHjVzrLOop5YaVNC",
	"CmQ2n43OyS6f/7yVtVnmqgHcpWyrVU5GW8EzdqnfPVq1en+ugsfMbDp/UneFyQrVht5gUFxgjBIr+1Wz",
	"Vm8uBDgbLqVGvyQxkMAtUmjTL2eL2UKqOo9WewMpnM2Ws0W8Ki6iwHPxxnkpJhVb2wWeuulq8E9UcuFK",
	"21wRck1WHax2BrESRRLnOaRH3tf2DwZ+7fJdLyXaWEt7X3bU55+Cs8MH8F+OPORvxi3KVGNcaL+NyPT5",
	"YvG0hQ+fUiw+ViwGqFBnGYawqcuZXMOLFsE48tze6tLkylhfcxu1fDgqI8zlJnQZJPbl6YwsT7JUAekW",
	"SSGRo9EDg/R6nUCoq0rT7oC27v+3uYzCw+3wS3zUSiuLd107ZJmrLU87YPRx/D9NMCrxVX2wfLLaQ82x",
	"QrKuOu876oJy90198NM06qpzW6VLQp3vFH4xgZ+yF3o5j663ZXh0YD/y1et1k4yd+nrdSM5YMsT4msQs",
	"59Csm38DAAD///Btn2/sCQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
